liquid = { SOI ~ element* ~ EOI }

// TODO: raw, comment
element = _{ tag | output_statement | content }

tag              = _{ end_tag | standard_tag | common_tag }
output_statement =  { "{{" ~ WC ~ S ~ filtered_expr ~ S ~ WC ~ "}}" }

// whitespace control
WC = { ("+" | "-" | "~")? }

filtered_expr    = { primitive ~ (S ~ filter)* ~ (s ~ inline_condition)? }
inline_condition = { "if" ~ s ~ primitive ~ (s ~ "else" ~ s ~ primitive)? ~ (S ~ filter)* ~ (S ~ tail_filter)? }

// NOTE: borrowing JSONPath literal
primitive = _{
    literal
  | range
  | jsonpath_query
}

filter_expr = _{ filter_name ~ S ~ (":" ~ S ~ filter_argument ~ (S ~ "," ~ S ~ filter_argument)*)? }
filter      =  { "|" ~ S ~ filter_expr }
tail_filter =  { "||" ~ S ~ filter_expr ~ (S ~ filter)* }

// NOTE: borrowing int from JSONPath
range = { "(" ~ S ~ int ~ S ~ ".." ~ S ~ int ~ S ~ ")" }

// NOTE: borrowing name_char from JSONPath
identifier = { name_first ~ name_char* }

// NOTE: borrowing function_name from JSONPath
filter_name         = { function_name_first ~ function_name_char* }
filter_argument     = { positional_argument | keyword_argument }
positional_argument = { primitive }
keyword_argument    = { filter_name ~ S ~ ":" ~ S ~ primitive }

content      =  { content_char+ }
content_char = _{ !("{{" | "{%" | "{#") ~ ANY }

/* Tags */
// NOTE: borrowing function_name from JSONPath
tag_name     =  { function_name_first ~ function_name_char* }
tag_argument =  { positional_argument | keyword_argument }
tag_start    = _{ "{%" ~ WC ~ S }
tag_end      = _{ S ~ WC ~ "%}" }

end_tag = { tag_start ~ "end" ~ tag_name ~ tag_end }

standard_tag = {
    assign_tag
  | capture_tag
  | case_tag
  | when_tag
  | else_tag
  | cycle_tag
  | decrement_tag
  | echo_tag
  | for_tag
  | break_tag
  | continue_tag
}

assign_tag = {
    tag_start ~ "assign" ~ s ~ identifier ~ S ~ "=" ~ S ~ filtered_expr ~ tag_end
}

capture_tag = { tag_start ~ "capture" ~ s ~ identifier ~ tag_end }
case_tag    = { tag_start ~ "case" ~ s ~ primitive ~ tag_end }

// NOTE: no "or" separated objects
when_tag      = { tag_start ~ "when" ~ s ~ primitive ~ (S ~ "," ~ S ~ primitive)* ~ tag_end }
else_tag      = { tag_start ~ "else" ~ tag_end }
cycle_tag     = { tag_start ~ "cycle" ~ s ~ primitive ~ (S ~ "," ~ S ~ primitive)* ~ tag_end }
decrement_tag = { tag_start ~ "decrement" ~ s ~ identifier ~ tag_end }
echo_tag      = { tag_start ~ "echo" ~ s ~ filtered_expr ~ tag_end }

for_tag = {
    tag_start ~ "for" ~ s ~ identifier ~ s ~ "in" ~ s ~ primitive ~ s ~ (for_tag_argument ~ (s ~ for_tag_argument)*)? ~ tag_end
}

// NOTE: accepting primitive values, the parser will raise syntax error of the primitive does not resolve to an int
for_tag_argument = {
    ("limit" ~ S ~ ":" ~ S ~ primitive)
  | ("offset" ~ S ~ ":" ~ S ~ (primitive | "continue"))
  | "reversed"
}

break_tag    = { tag_start ~ "break" ~ tag_end }
continue_tag = { tag_start ~ "continue" ~ tag_end }

// TODO: common reserved words?
common_tag = {
    tag_start ~ tag_name ~ s ~ (tag_argument ~ (S ~ "," ~ S ~ tag_argument)*)? ~ tag_end
}

/* Modified JSONPath */
jsonpath_query = {
    (root_identifier ~ segments)
  | (implicit_root_segment ~ segments)
}

segments = _{ (S ~ segment)* }

B = _{ "\x20" | "\x09" | "\x0A" | "\x0D" }
S = _{ B* }
s = _{ B+ }

root_identifier = _{ "$" }

selector = _{
    name_selector
  | wildcard_selector
  | slice_selector
  | index_selector
  | filter_selector
  | singular_query_selector
}

name_selector = _{ string_literal }

string_literal = _{
    ("\x22" ~ double_quoted ~ "\x22")
  | ("\x27" ~ single_quoted ~ "\x27")
}

double_quoted = { double_quoted_char* }
single_quoted = { single_quoted_char* }

double_quoted_char = _{
    unescaped
  | "\x27"
  | (ESC ~ "\x22")
  | (ESC ~ escapable)
}

single_quoted_char = _{
    unescaped
  | "\x22"
  | (ESC ~ "\x27")
  | (ESC ~ escapable)
}

ESC = _{ "\x5C" }

unescaped = _{
    '\u{20}'..'\u{21}'
  | '\u{23}'..'\u{26}'
  | '\u{28}'..'\u{5B}'
  | '\u{5D}'..'\u{D7FF}'
  | '\u{E000}'..'\u{10FFFF}'
}

escapable = _{
    "\x62"
  | "\x66"
  | "\x6E"
  | "\x72"
  | "\x74"
  | "/"
  | "\\"
  | ("\x75" ~ hexchar)
}

hexchar = _{
    non_surrogate
  | (high_surrogate ~ "\\u" ~ low_surrogate)
}

non_surrogate = _{
    ((ASCII_DIGIT | ^"A" | ^"B" | ^"C" | ^"E" | ^"F") ~ ASCII_HEX_DIGIT{3})
  | (^"D" ~ '\u{30}'..'\u{37}' ~ ASCII_HEX_DIGIT{2})
}

high_surrogate    = _{ ^"D" ~ ("8" | "9" | ^"A" | ^"B") ~ ASCII_HEX_DIGIT{2} }
low_surrogate     = _{ ^"D" ~ (^"C" | ^"D" | ^"E" | ^"F") ~ ASCII_HEX_DIGIT{2} }
wildcard_selector =  { "*" }
index_selector    = @{ int }
int               =  { "0" | ("-"? ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }
slice_selector    =  { (start ~ S)? ~ ":" ~ S ~ (stop ~ S)? ~ (":" ~ (S ~ step)?)? }
start             = @{ int }
stop              = @{ int }
step              = @{ int }
filter_selector   =  { "?" ~ S ~ logical_expr }
logical_expr      = _{ logical_or_expr }
logical_or_expr   =  { logical_and_expr ~ (S ~ "||" ~ S ~ logical_and_expr)* }
logical_and_expr  =  { basic_expr ~ (S ~ "&&" ~ S ~ basic_expr)* }

singular_query_selector = {
    (root_identifier ~ singular_query_segments)
  | ((implicit_root_name_segment | index_segment) ~ singular_query_segments)
}

basic_expr = _{
    paren_expr
  | comparison_expr
  | test_expr
}

paren_expr              =  { (logical_not_op ~ S)? ~ "(" ~ S ~ logical_expr ~ S ~ ")" }
logical_not_op          =  { "!" }
test_expr               =  { (logical_not_op ~ S)? ~ (filter_query | function_expr) }
filter_query            = _{ rel_query | root_query }
root_query              =  { jsonpath_query }
rel_query               =  { current_node_identifier ~ segments }
current_node_identifier = _{ "@" }
comparison_expr         =  { comparable ~ S ~ comparison_op ~ S ~ comparable }

literal = _{
    number
  | string_literal
  | true_literal
  | false_literal
  | null
}

comparable = _{
    literal
  | singular_query
  | function_expr
}

comparison_op = {
    "=="
  | "!="
  | "<="
  | ">="
  | "<"
  | ">"
}

// TODO: silencing singular_query and/or singular_query_segments leads to
// undesirable error messages.

singular_query          = _{ rel_singular_query | abs_singular_query }
rel_singular_query      =  { current_node_identifier ~ singular_query_segments }
abs_singular_query      =  { root_identifier ~ singular_query_segments }
singular_query_segments = _{ (S ~ (name_segment | index_segment | singular_query_segment))* }
singular_query_segment  =  { "[" ~ singular_query_selector ~ "]" }

// TODO: whitespace?
name_segment = {
    ("[" ~ name_selector ~ "]")
  | ("." ~ member_name_shorthand)
}

// TODO: whitespace?
implicit_root_name_segment = {
    ("[" ~ name_selector ~ "]")
  | member_name_shorthand
}

index_segment       =  { "[" ~ index_selector ~ "]" }
number              =  { (int | "-0") ~ frac? ~ exp? }
frac                =  { "." ~ ASCII_DIGIT+ }
exp                 =  { ^"e" ~ ("-" | "+")? ~ ASCII_DIGIT+ }
true_literal        =  { "true" }
false_literal       =  { "false" }
null                =  { "null" }
function_name       =  { function_name_first ~ function_name_char* }
function_name_first = _{ ASCII_ALPHA_LOWER }
function_name_char  = _{ function_name_first | "_" | ASCII_DIGIT }

function_expr = {
    function_name ~ "(" ~ S ~ (function_argument ~ (S ~ "," ~ S ~ function_argument)*)? ~ S ~ ")"
}

function_argument = _{
    filter_query
  | logical_expr
  | function_expr
  | literal
}

segment = _{
    child_segment
  | descendant_segment
}

child_segment = {
    bracketed_selection
  | ("." ~ (wildcard_selector | member_name_shorthand))
}

implicit_root_segment = {
    bracketed_selection
  | (wildcard_selector | member_name_shorthand)
}

bracketed_selection   = { "[" ~ S ~ selector ~ (S ~ "," ~ S ~ selector)* ~ S ~ "]" }
member_name_shorthand = { name_first ~ name_char* }

name_first = _{
    ASCII_ALPHA
  | "_"
  | '\u{80}'..'\u{D7FF}'
  | '\u{E000}'..'\u{10FFFF}'
}

name_char = _{ name_first | ASCII_DIGIT }

descendant_segment = {
    ".." ~ (bracketed_selection | wildcard_selector | member_name_shorthand)
}
