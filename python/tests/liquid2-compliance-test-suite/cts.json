{
  "description": "Liquid2 compliance test suite",
  "tests": [
    {
      "name": "output, string literal",
      "template": "{{ 'a' }}",
      "data": {},
      "result": "a"
    },
    {
      "name": "output, integer literal",
      "template": "{{ 1 }}",
      "data": {},
      "result": "1"
    },
    {
      "name": "output, integer literal, negative",
      "template": "{{ -1 }}",
      "data": {},
      "result": "-1"
    },
    {
      "name": "output, float literal",
      "template": "{{ 1.1 }}",
      "data": {},
      "result": "1.1"
    },
    {
      "name": "output, float literal, negative",
      "template": "{{ -1.1 }}",
      "data": {},
      "result": "-1.1"
    },
    {
      "name": "output, integer literal, exponent",
      "template": "{{ 1e2 }}",
      "data": {},
      "result": "100"
    },
    {
      "name": "output, float literal, negative exponent",
      "template": "{{ 1e-2 }}",
      "data": {},
      "result": "0.01"
    },
    {
      "name": "output, float literal, positive exponent",
      "template": "{{ 1e+2 }}",
      "data": {},
      "result": "100"
    },
    {
      "name": "output, null",
      "template": "{{ null }}",
      "data": {},
      "result": ""
    },
    {
      "name": "output, range",
      "template": "{{ (1..3) }}",
      "data": {},
      "result": "1..3"
    },
    {
      "name": "output, query, global",
      "template": "{{ a }}",
      "data": {
        "a": "b"
      },
      "result": "b"
    },
    {
      "name": "output, query, local",
      "template": "{% assign a = 'b' %}{{ a }}",
      "data": {},
      "result": "b"
    },
    {
      "name": "output, query, dotted",
      "template": "{{ a.b }}",
      "data": {
        "a": {
          "b": "c"
        }
      },
      "result": "c"
    },
    {
      "name": "output, query, array index",
      "template": "{{ a.b[0] }}",
      "data": {
        "a": {
          "b": [
            1,
            2,
            3
          ]
        }
      },
      "result": "1"
    },
    {
      "name": "output, query, negative array index",
      "template": "{{ a.b[-1] }}",
      "data": {
        "a": {
          "b": [
            1,
            2,
            3
          ]
        }
      },
      "result": "3"
    },
    {
      "name": "output, query, array index from variable",
      "template": "{% assign x = 1 %}{{ a.b[x] }}",
      "data": {
        "a": {
          "b": [
            1,
            2,
            3
          ]
        }
      },
      "result": "2"
    },
    {
      "name": "output, query, names from variables",
      "template": "{{ site.data.menu[include.menu][include.locale] }}",
      "data": {
        "site": {
          "data": {
            "menu": {
              "foo": {
                "bar": "it works!"
              }
            }
          }
        },
        "include": {
          "menu": "foo",
          "locale": "bar"
        }
      },
      "result": "it works!"
    },
    {
      "name": "output, filter",
      "template": "{{ 'hello' | upcase }}",
      "data": {},
      "result": "HELLO"
    },
    {
      "name": "output, string literal, end output delimiter",
      "template": "{{ '}}' }}",
      "data": {},
      "result": "}}"
    },
    {
      "name": "output, string literal, start output delimiter",
      "template": "{{ '{{' }}",
      "data": {},
      "result": "{{"
    },
    {
      "name": "output, string literal, end tag delimiter",
      "template": "{{ '%}' }}",
      "data": {},
      "result": "%}"
    },
    {
      "name": "output, string literal, start tag delimiter",
      "template": "{{ '{%' }}",
      "data": {},
      "result": "{%"
    },
    {
      "name": "output, string literal, end comment delimiter",
      "template": "{{ '#}' }}",
      "data": {},
      "result": "#}"
    },
    {
      "name": "output, string literal, start tag delimiter",
      "template": "{{ '{#' }}",
      "data": {},
      "result": "{#"
    },
    {
      "name": "output, string literal, escaped single quote in single quoted",
      "template": "{{ '\\'' }}",
      "data": {},
      "result": "'"
    },
    {
      "name": "output, string literal, escaped double quote in double quoted",
      "template": "{{ \"\\\"\" }}",
      "data": {},
      "result": "\""
    },
    {
      "name": "output, query, bracket notation",
      "template": "{{ a['b c'] }}",
      "data": {
        "a": {
          "b c": "d"
        }
      },
      "result": "d"
    },
    {
      "name": "output, query, bracket notation, root",
      "template": "{{ ['a b c'] }}",
      "data": {
        "a b c": "d"
      },
      "result": "d"
    },
    {
      "name": "output, query, singular query selector",
      "template": "{{ a[a.b.c] }}",
      "data": {
        "a": {
          "b": {
            "c": "d"
          },
          "d": "x"
        }
      },
      "result": "x"
    },
    {
      "name": "output, ternary expression, truthy",
      "template": "{{ 'b' if true else 'c' }}",
      "data": {},
      "result": "b"
    },
    {
      "name": "output, ternary expression, falsy",
      "template": "{{ 'b' if false else 'c' }}",
      "data": {},
      "result": "c"
    },
    {
      "name": "output, ternary expression, truthy filter",
      "template": "{{ 'b' | upcase if true else 'c' }}",
      "data": {},
      "result": "B"
    },
    {
      "name": "output, ternary expression, falsy filter",
      "template": "{{ 'b' if false else 'c' | upcase }}",
      "data": {},
      "result": "C"
    },
    {
      "name": "output, ternary expression, truthy, falsy filter",
      "template": "{{ 'b' if true else 'c' | upcase }}",
      "data": {},
      "result": "b"
    },
    {
      "name": "output, ternary expression, falsy, truthy filter",
      "template": "{{ 'b' | upcase if false else 'c' }}",
      "data": {},
      "result": "c"
    },
    {
      "name": "output, ternary expression, tail filter",
      "template": "{{ 'b' if true else 'c' || upcase }}",
      "data": {},
      "result": "B"
    },
    {
      "name": "tags, for, range literal",
      "template": "{% for a in (1..3) %}{{ a }},{% endfor %}",
      "data": {},
      "result": "1,2,3,"
    },
    {
      "name": "tags, for, array",
      "template": "{% for a in b %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1,2,3,"
    },
    {
      "name": "tags, for, hash or dict or map",
      "template": "{% for a in b %}{{ a[0] }} {{ a[1] }},{% endfor %}",
      "data": {
        "b": {
          "x": 1,
          "y": 2,
          "z": 3
        }
      },
      "result": "x 1,y 2,z 3,"
    },
    {
      "name": "tags, for, empty array",
      "template": "{% for a in b %}{{ a }},{% endfor %}",
      "data": {
        "b": []
      },
      "result": ""
    },
    {
      "name": "tags, for, empty array with default",
      "template": "{% for a in b %}{{ a }},{% else %}c{% endfor %}",
      "data": {
        "b": []
      },
      "result": "c"
    },
    {
      "name": "tags, for, string",
      "template": "{% for a in '123' %}{{ a }},{% endfor %}",
      "data": {},
      "result": "1,2,3,"
    },
    {
      "name": "tags, for, break",
      "template": "{% for a in b %}{{ a }},{% if a == 2 %}{% break %}{% endif %}{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1,2,"
    },
    {
      "name": "tags, for, continue",
      "template": "{% for a in b %}{% if a == 2 %}{% continue %}{% endif %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1,3,"
    },
    {
      "name": "tags, for, array, limit, colon",
      "template": "{% for a in b limit:3 %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "1,2,3,"
    },
    {
      "name": "tags, for, array, limit, equals",
      "template": "{% for a in b limit=3 %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "1,2,3,"
    },
    {
      "name": "tags, for, array, offset, colon",
      "template": "{% for a in b offset:2 %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "3,4,5,"
    },
    {
      "name": "tags, for, array, offset, equals",
      "template": "{% for a in b offset=2 %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "3,4,5,"
    },
    {
      "name": "tags, for, array, reversed",
      "template": "{% for a in b reversed %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "3,2,1,"
    },
    {
      "name": "tags, for, comma separated arguments",
      "template": "{% for a in b offset:1, limit:3, reversed %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "4,3,2,"
    },
    {
      "name": "tags, for, space separated arguments",
      "template": "{% for a in b offset:1 limit:3 reversed %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "4,3,2,"
    },
    {
      "name": "tags, for, reversed is first",
      "template": "{% for a in b reversed offset:1, limit:3 %}{{ a }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "4,3,2,"
    },
    {
      "name": "tags, for, length",
      "template": "{% for a in b %}{{ a }} {{ forloop.length }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 3,2 3,3 3,"
    },
    {
      "name": "tags, for, length, limit",
      "template": "{% for a in b limit:3 %}{{ a }} {{ forloop.length }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "1 3,2 3,3 3,"
    },
    {
      "name": "tags, for, length, offset",
      "template": "{% for a in b offset:2 %}{{ a }} {{ forloop.length }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "3 3,4 3,5 3,"
    },
    {
      "name": "tags, for, first",
      "template": "{% for a in b %}{{ a }} {{ forloop.first }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 true,2 false,3 false,"
    },
    {
      "name": "tags, for, first, offset",
      "template": "{% for a in b offset:1 %}{{ a }} {{ forloop.first }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "2 true,3 false,"
    },
    {
      "name": "tags, for, last",
      "template": "{% for a in b %}{{ a }} {{ forloop.last }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 false,2 false,3 true,"
    },
    {
      "name": "tags, for, last, limit",
      "template": "{% for a in b limit:2 %}{{ a }} {{ forloop.last }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 false,2 true,"
    },
    {
      "name": "tags, for, index",
      "template": "{% for a in b %}{{ a }} {{ forloop.index }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 1,2 2,3 3,"
    },
    {
      "name": "tags, for, index0",
      "template": "{% for a in b %}{{ a }} {{ forloop.index0 }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 0,2 1,3 2,"
    },
    {
      "name": "tags, for, rindex",
      "template": "{% for a in b %}{{ a }} {{ forloop.rindex }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 3,2 2,3 1,"
    },
    {
      "name": "tags, for, rindex0",
      "template": "{% for a in b %}{{ a }} {{ forloop.rindex0 }},{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 2,2 1,3 0,"
    },
    {
      "name": "tags, for, name",
      "template": "{% for a in b limit:1 %}{{ forloop.name }}{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "a-b"
    },
    {
      "name": "tags, for, name, range",
      "template": "{% for a in (1..3) limit:1 %}{{ forloop.name }}{% endfor %}",
      "data": {},
      "result": "a-(1..3)"
    },
    {
      "name": "tags, for, forloop goes out of scope",
      "template": "{% for a in b %}{{ a }} {{ forloop.length }},{% endfor %}{{ forloop.length }}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "1 3,2 3,3 3,"
    },
    {
      "name": "tags, for, iterate nested path",
      "template": "{% for link in linklists[section.settings.menu].links %}{{ link }} {% endfor %}",
      "data": {
        "linklists": {
          "main": {
            "links": [
              "1",
              "2"
            ]
          }
        },
        "section": {
          "settings": {
            "menu": "main"
          }
        }
      },
      "result": "1 2 "
    },
    {
      "name": "tags, for, offset, continue",
      "template": "{% for a in b limit:3 %}a{{ a }} {% endfor %}{% for a in b offset:continue %}b{{ a }} {% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1 a2 a3 b4 b5 b6 "
    },
    {
      "name": "tags, for, offset, continue, range",
      "template": "{% for a in (1..6) limit:3 %}a{{ a }} {% endfor %}{% for a in (1..6) offset:continue %}b{{ a }} {% endfor %}",
      "data": {},
      "result": "a1 a2 a3 b4 b5 b6 "
    },
    {
      "name": "tags, for, offset, continue, assigned range",
      "template": "{% assign b = (1..6) %}{% for a in b limit:3 %}a{{ a }} {% endfor %}{% for a in b offset:continue %}b{{ a }} {% endfor %}",
      "data": {},
      "result": "a1 a2 a3 b4 b5 b6 "
    },
    {
      "name": "tags, for, offset, continue, reassigned array",
      "template": "{% assign b = '1,2,3,4,5,6' | split: ',' %}{% for a in b limit:3 %}{{ a }} {% endfor %}{% assign b = 'u,v,w,x,y,z' | split: ',' %}{% for a in b offset:continue %}{{ a }} {% endfor %}",
      "data": {},
      "result": "1 2 3 x y z "
    },
    {
      "name": "tags, for, offset, continue, different loop variable",
      "template": "{% for a in b limit:3 %}a{{ a }} {% endfor %}{% for x in b offset:continue %}b{{ x }} {% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1 a2 a3 b1 b2 b3 b4 b5 b6 "
    },
    {
      "name": "tags, for, offset, continue, nothing to continue from",
      "template": "{% for a in b %}a{{ a }} {% endfor %}{% for a in b offset:continue %}b{{ a }} {% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1 a2 a3 a4 a5 a6 "
    },
    {
      "name": "tags, for, offset, continue, no preceding loop",
      "template": "{% for a in b offset:continue %}{{ a }} {% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "1 2 3 4 5 6 "
    },
    {
      "name": "tags, for, offset, continue, twice",
      "template": "{% for a in b limit:2 %}a{{ a }} {% endfor %}{% for a in b offset:continue limit: 2 %}b{{ a }} {% endfor %}{% for a in b offset:continue %}c{{ a }} {% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1 a2 b3 b4 c5 c6 "
    },
    {
      "name": "tags, for, offset, continue, broken",
      "template": "{% for a in b limit:4 %}{% if a == 3 %}{% break %}{% endif %}a{{ a }} {% endfor %}{% for a in b offset:continue limit: 2 %}b{{ a }} {% endfor %}{% for a in b offset:continue %}c{{ a }} {% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1 a2 b5 b6 "
    },
    {
      "name": "tags, for, offset, continue, forloop length",
      "template": "{% for a in b limit: 2 %}a{{ a }}-{{ forloop.length }} {% endfor %}{% for a in b offset:continue %}b{{ a }}-{{ forloop.length }} {% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1-2 a2-2 b3-4 b4-4 b5-4 b6-4 "
    },
    {
      "name": "tags, extends, no blocks",
      "template": "{% extends 'a' %} this should not be rendered",
      "data": {
        "you": "world"
      },
      "templates": {
        "a": "Hello, {{ you }}!"
      },
      "result": "Hello, world!"
    },
    {
      "name": "tags, extends, no parent block",
      "template": "{% extends 'a' %}{% block b %}this should not be rendered{% endblock %}",
      "data": {
        "you": "world"
      },
      "templates": {
        "a": "Hello, {{ you }}!"
      },
      "result": "Hello, world!"
    },
    {
      "name": "tags, extends, no child block",
      "template": "{% extends 'a' %} this should not be rendered",
      "data": {
        "you": "world"
      },
      "templates": {
        "a": "Hello, {% block b %}{{ you }}!{% endblock %}"
      },
      "result": "Hello, world!"
    },
    {
      "name": "tags, extends, override parent block",
      "template": "{% extends 'a' %}{% block b %}sue{% endblock %}",
      "data": {
        "you": "world"
      },
      "templates": {
        "a": "Hello, {% block b %}{{ you }}{% endblock %}!"
      },
      "result": "Hello, sue!"
    },
    {
      "name": "tags, extends, render base template directly",
      "template": "Hello, {% block b %}{{ you }}{% endblock %}!",
      "data": {
        "you": "world"
      },
      "result": "Hello, world!"
    },
    {
      "name": "tags, extends, output super block",
      "template": "{% extends a %}{% block b %}{{ block.super }} and sue{% endblock %}",
      "data": {
        "you": "world"
      },
      "templates": {
        "a": "Hello, {% block b %}{{ you }}{% endblock %}!"
      },
      "result": "Hello, world and sue!"
    },
    {
      "name": "tags, extends, scoped",
      "template": "{% extends a %}{% block b %}{{ greeting }}, {{ you }}!{% endblock %}",
      "data": {},
      "templates": {
        "a": "{% assign greeting = 'Hello' %}{% block b %}{% endblock %}{% assign you = 'world' %}"
      },
      "result": "Hello, !"
    },
    {
      "name": "tags, extends, block scope",
      "template": "{% extends a %}{% block b %}{{ greeting }}, {{ x }}! {% endblock %}",
      "data": {},
      "templates": {
        "a": "{% assign greeting = 'Hello' %}{% for x in (1..2) %}{% block b %}{% endblock %}{% endfor %}"
      },
      "result": "Hello, 1! Hello, 2! "
    },
    {
      "name": "tags, extends, multiple",
      "template": "{% extends a %}{% block b %}Hello, {{ you }}!{% endblock %}",
      "data": {},
      "templates": {
        "a": "{% extends c %}",
        "c": "{% assign you = 'world' %}{% block b %}{% endblock %}"
      },
      "result": "Hello, world!"
    },
    {
      "name": "tags, extends, nested block scoped parent variables are in scope",
      "template": "{% extends 'some' %}{% block baz %}Hello, {{ you }} {{ other }} {{ i }}:{{ x }} {% endblock %}",
      "result": "Hello, world banana 1:1 Hello, world banana 1:2 Hello, world banana 2:1 Hello, world banana 2:2 ",
      "data": {},
      "templates": {
        "base": "{% assign you = 'world' %}{% for i in (1..2) %}{% block bar %}hello, {{ you }}!{% endblock %}{% endfor %}",
        "some": "{% extends 'base' %}{% block bar %}{% assign other = 'banana' %}{% for x in (1..2) %}{% block baz %}{% endblock baz %}{% endfor %}{% endblock bar %}"
      }
    },
    {
      "name": "tags, extends, child variables are out of scope",
      "template": "{% extends 'foo' %}{% block bar %}{% assign something = '/other' %}goodbye, {{ you }}{% assign you = 'sue' %}{% endblock %}",
      "result": "goodbye, world",
      "data": {},
      "templates": {
        "foo": "{% assign you = 'world' %}{% block bar %}{% endblock %}{{ something }}"
      }
    },
    {
      "name": "tags, extends, nested outer block",
      "template": "{% extends 'foo' %}{% block bar %}Goodbye{% endblock %}",
      "result": "Goodbye!",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}!"
      }
    },
    {
      "name": "tags, extends, override nested block",
      "template": "{% extends 'foo' %}{% block greeting %}Goodbye{% endblock %}",
      "result": "Goodbye, world!",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}"
      }
    },
    {
      "name": "tags, extends, super nested blocks",
      "template": "{% extends 'foo' %}{% block bar %}{{ block.super }}!!{% endblock %}",
      "result": "Hello, world!!!",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}"
      }
    },
    {
      "name": "tags, extends, override a parent's parent block",
      "template": "{% extends 'bar' %}{% block greeting %}Goodbye,{% endblock %}",
      "result": "Goodbye, world",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block greeting %}Hello{% endblock %} {{ you }}",
        "bar": "{% extends 'foo' %}"
      }
    },
    {
      "name": "tags, extends, multi-level super",
      "template": "{% extends 'baz' %}{% block bar %}{{ block.super }}!!{% endblock %}",
      "result": "Hello, world!**!!",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}",
        "baz": "{% extends 'foo' %}{% block bar %}{{ block.super }}**{% endblock %}"
      }
    },
    {
      "name": "tags, extends, include an extended template",
      "template": "{% include 'bar' %}",
      "result": "foo bar",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}",
        "bar": "{% extends 'foo' %}{% block bar %}foo bar{% endblock %}"
      }
    },
    {
      "name": "tags, extends, include in an overridden block",
      "template": "{% extends 'foo' %}{% block greeting %}{% include 'bar' %}{% endblock %}",
      "result": "I am included, world!",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}",
        "bar": "I am included"
      }
    },
    {
      "name": "tags, extends, render an extended template",
      "template": "{% render 'bar' %}",
      "result": "foo bar",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}",
        "bar": "{% extends 'foo' %}{% block bar %}foo bar{% endblock %}"
      }
    },
    {
      "name": "tags, extends, render in an overridden block",
      "template": "{% extends 'foo' %}{% block greeting %}{% render 'bar' %}{% endblock %}",
      "result": "I am rendered, world!",
      "data": {
        "you": "world"
      },
      "templates": {
        "foo": "{% block bar %}{% block greeting %}Hello{% endblock %}, {{ you }}!{% endblock %}",
        "bar": "I am rendered"
      }
    },
    {
      "name": "tags, if, literal true",
      "template": "{% if true %}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, literal false, no alternative",
      "template": "{% if false %}a{% endif %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, if, literal false, alternative",
      "template": "{% if false %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, literal false, truthy alternative",
      "template": "{% if false %}a{% elsif true %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, literal false, falsy alternative",
      "template": "{% if false %}a{% elsif false %}b{% endif %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, if, literal false, falsy alternative, final alternative",
      "template": "{% if false %}a{% elsif false %}b{% else %}c{% endif %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, if, equality, truthy, strings",
      "template": "{% if a == 'b' %}c{% endif %}",
      "data": {
        "a": "b"
      },
      "result": "c"
    },
    {
      "name": "tags, if, equality, falsy, strings",
      "template": "{% if a == 'x' %}c{% endif %}",
      "data": {
        "a": "b"
      },
      "result": ""
    },
    {
      "name": "tags, if, equality, truthy, integers",
      "template": "{% if a == 1 %}b{% endif %}",
      "data": {
        "a": 1
      },
      "result": "b"
    },
    {
      "name": "tags, if, equality, falsy, integers",
      "template": "{% if a == 1 %}b{% endif %}",
      "data": {
        "a": 2
      },
      "result": ""
    },
    {
      "name": "tags, if, equality, truthy, floats",
      "template": "{% if a == 1.1 %}b{% endif %}",
      "data": {
        "a": 1.1
      },
      "result": "b"
    },
    {
      "name": "tags, if, equality, falsy, floats",
      "template": "{% if a == 1.2 %}b{% endif %}",
      "data": {
        "a": 1.0
      },
      "result": ""
    },
    {
      "name": "tags, if, equality, truthy, float and integer",
      "template": "{% if a == 1 %}b{% endif %}",
      "data": {
        "a": 1.0
      },
      "result": "b"
    },
    {
      "name": "tags, if, equality, falsy, float and integer",
      "template": "{% if a == 1 %}b{% endif %}",
      "data": {
        "a": 1.1
      },
      "result": ""
    },
    {
      "name": "tags, if, less than, truthy, integers",
      "template": "{% if a < 10 %}b{% endif %}",
      "data": {
        "a": 5
      },
      "result": "b"
    },
    {
      "name": "tags, if, less than, falsy, integers",
      "template": "{% if a < 10 %}b{% endif %}",
      "data": {
        "a": 20
      },
      "result": ""
    },
    {
      "name": "tags, if, less than, truthy, floats",
      "template": "{% if a < 10.1 %}b{% endif %}",
      "data": {
        "a": 5.1
      },
      "result": "b"
    },
    {
      "name": "tags, if, less than, falsy, floats",
      "template": "{% if a < 10.1 %}b{% endif %}",
      "data": {
        "a": 20.1
      },
      "result": ""
    },
    {
      "name": "tags, if, less than, truthy, strings",
      "template": "{% if 'abc' < 'acb' %}x{% endif %}",
      "data": {},
      "result": "x"
    },
    {
      "name": "tags, if, less than, falsy, strings",
      "template": "{% if 'bbb' < 'aaa' %}x{% else %}y{% endif %}",
      "data": {},
      "result": "y"
    },
    {
      "name": "tags, if, non-empty hash or dict or map is truthy",
      "template": "{% if a %}d{% endif %}",
      "data": {
        "a": {
          "b": "c"
        }
      },
      "result": "d"
    },
    {
      "name": "tags, if, literal null is falsy",
      "template": "{% if null %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, literal nil is falsy",
      "template": "{% if nil %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, undefined variables are falsy",
      "template": "{% if nosuchthing %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, undefined variables are equal to null",
      "template": "{% if nosuchthing == null %}a{% else %}b{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, nested, truthy",
      "template": "{% if true %}a{% if true %}b{% endif %}{% else %}c{% endif %}",
      "data": {},
      "result": "ab"
    },
    {
      "name": "tags, if, nested, falsy",
      "template": "{% if true %}a{% if false %}b{% endif %}{% else %}c{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, contains, truthy, array of integers",
      "template": "{% if a contains 1 %}b{% endif %}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "result": "b"
    },
    {
      "name": "tags, if, contains, falsy, array of integers",
      "template": "{% if a contains 5 %}b{% else %}c{% endif %}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "result": "c"
    },
    {
      "name": "tags, if, in, truthy, array of integers",
      "template": "{% if 1 in a %}b{% else %}c{% endif %}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "result": "b"
    },
    {
      "name": "tags, if, in, falsy, array of integers",
      "template": "{% if 5 in a %}b{% else %}c{% endif %}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "result": "c"
    },
    {
      "name": "tags, if, contains, truthy, strings",
      "template": "{% if 'foobar' contains 'oob' %}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, contains, falsy, strings",
      "template": "{% if 'foobar' contains 'baz' %}b{% else %}c{% endif %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, if, contains, string and integer",
      "template": "{% if 'foo2bar' contains 2 %}a{% else %}b{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, in, truthy, strings",
      "template": "{% if 'oob' in 'foobar' %}b{% else %}c{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, in, falsy, strings",
      "template": "{% if 'baz' in 'foobar' %}b{% else %}c{% endif %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, if, contains, truthy, hash or dict or map",
      "template": "{% if a contains 'b' %}c{% endif %}",
      "data": {
        "a": {
          "b": false
        }
      },
      "result": "c"
    },
    {
      "name": "tags, if, contains, falsy, hash or dict or map",
      "template": "{% if a contains 'b' %}c{% else %}d{% endif %}",
      "data": {
        "a": {
          "e": true
        }
      },
      "result": "d"
    },
    {
      "name": "tags, if, in, truthy, hash or dict or map",
      "template": "{% if 'a' in b %}c{% else %}d{% endif %}",
      "data": {
        "b": {
          "a": false
        }
      },
      "result": "c"
    },
    {
      "name": "tags, if, in, falsy, hash or dict or map",
      "template": "{% if 'a' in b %}c{% else %}d{% endif %}",
      "data": {
        "b": {
          "e": true
        }
      },
      "result": "d"
    },
    {
      "name": "tags, if, not equal, truthy, strings",
      "template": "{% if a != 'b' %}c{% endif %}",
      "data": {
        "a": "d"
      },
      "result": "c"
    },
    {
      "name": "tags, if, not equal, falsy, strings",
      "template": "{% if a != 'x' %}c{% else %}d{% endif %}",
      "data": {
        "a": "x"
      },
      "result": "d"
    },
    {
      "name": "tags, if, not equal, alternative operator",
      "template": "{% if a <> 'b' %}c{% endif %}",
      "data": {
        "a": "d"
      },
      "result": "c"
    },
    {
      "name": "tags, if, empty string is truthy",
      "template": "{% if '' %}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, empty array is truthy",
      "template": "{% if a %}b{% endif %}",
      "data": {
        "a": []
      },
      "result": "b"
    },
    {
      "name": "tags, if, empty array is equal to special empty",
      "template": "{% if a == empty %}b{% endif %}",
      "data": {
        "a": []
      },
      "result": "b"
    },
    {
      "name": "tags, if, empty hash or dict or map is equal to special empty",
      "template": "{% if a == empty %}b{% endif %}",
      "data": {
        "a": {}
      },
      "result": "b"
    },
    {
      "name": "tags, if, empty string is equal to special empty",
      "template": "{% if a == empty %}b{% endif %}",
      "data": {
        "a": ""
      },
      "result": "b"
    },
    {
      "name": "tags, if, empty string is equal to special blank",
      "template": "{% if a == blank %}b{% endif %}",
      "data": {
        "a": ""
      },
      "result": "b"
    },
    {
      "name": "tags, if, whitespace only string is equal to special blank",
      "template": "{% if '  ' == blank %}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, equality, range literal",
      "template": "{% assign a = (1..3) %}{% if a == (1..3) %}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, equality, arrays",
      "template": "{% assign a = 'a,b,c' | split: ',' %}{% if a == b %}c{% endif %}",
      "data": {
        "b": [
          "a",
          "b",
          "c"
        ]
      },
      "result": "c"
    },
    {
      "name": "tags, if, equality, string and integer",
      "template": "{% if 1 == '1' %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, greater than, string and integer",
      "template": "{% if 2 > '1' %}a{% else %}b{% endif %}",
      "invalid": true
    },
    {
      "name": "tags, if, logical not, false literal",
      "template": "{% if not false %}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, logical not, true literal",
      "template": "{% if not true %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, logical and binds more tightly than or",
      "template": "{% if true and false and false or true %}a{% else %}b{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, group terms with parentheses",
      "template": "{% if (true and (false and (false or true))) %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, unbalanced parentheses",
      "template": "{% if true and (false and true %}a{% else %}b{% endif %}",
      "invalid": true
    },
    {
      "name": "tags, if, more unbalanced parentheses",
      "template": "{% if (true and (false and (false or true)) %}a{% else %}b{% endif %}",
      "invalid": true
    },
    {
      "name": "tags, if, zero is not equal to false",
      "template": "{% if 0 == false %}a{% else %}b{% endif %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, if, zero is truthy",
      "template": "{% if 0 %}a{% else %}b{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, float zero is truthy",
      "template": "{% if 0.0 %}a{% else %}b{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, missing whitespace after tag name",
      "template": "{% iftrue %}a{% endif %}",
      "invalid": true
    },
    {
      "name": "tags, if, no whitespace before tag name",
      "template": "{%if true %}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, no whitespace after expression",
      "template": "{% if true%}a{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, if, extra else block",
      "template": "{% if false %}a{% else %}b{% else %}c{% endif %}",
      "invalid": true
    },
    {
      "name": "tags, if, extra elsif block",
      "template": "{% if false %}a{% else %}b{% elsif true %}c{% endif %}",
      "invalid": true
    },
    {
      "name": "tags, unless, literal true, no alternative",
      "template": "{% unless true %}a{% endunless %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, unless, literal false",
      "template": "{% unless false %}a{% endunless %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, unless, literal true, alternative",
      "template": "{% unless true %}a{% else %}b{% endunless %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, unless, literal true, truthy alternative",
      "template": "{% unless true %}a{% elsif true %}b{% endunless %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, unless, literal true, falsy alternative",
      "template": "{% unless true %}a{% elsif false %}b{% endunless %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, unless, literal true, falsy alternative, final alternative",
      "template": "{% unless true %}a{% elsif false %}b{% else %}c{% endunless %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, unless, missing whitespace after tag name",
      "template": "{% unlesstrue %}a{% endunless %}",
      "invalid": true
    },
    {
      "name": "tags, unless, no whitespace before tag name",
      "template": "{%unless false %}a{% endunless %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, unless, no whitespace after expression",
      "template": "{% unless false%}a{% endunless %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, unless, extra else block",
      "template": "{% unless true %}a{% else %}b{% else %}c{% endunless %}",
      "invalid": true
    },
    {
      "name": "tags, unless, extra elsif block",
      "template": "{% unless true %}a{% else %}b{% elsif true %}c{% endunless %}",
      "invalid": true
    },
    {
      "name": "tags, echo, string literal",
      "template": "{% echo 'a' %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, echo, integer literal",
      "template": "{% echo 1 %}",
      "data": {},
      "result": "1"
    },
    {
      "name": "tags, echo, integer literal, negative",
      "template": "{% echo -1 %}",
      "data": {},
      "result": "-1"
    },
    {
      "name": "tags, echo, float literal",
      "template": "{% echo 1.1 %}",
      "data": {},
      "result": "1.1"
    },
    {
      "name": "tags, echo, float literal, negative",
      "template": "{% echo -1.1 %}",
      "data": {},
      "result": "-1.1"
    },
    {
      "name": "tags, echo, integer literal, exponent",
      "template": "{% echo 1e2 %}",
      "data": {},
      "result": "100"
    },
    {
      "name": "tags, echo, float literal, negative exponent",
      "template": "{% echo 1e-2 %}",
      "data": {},
      "result": "0.01"
    },
    {
      "name": "tags, echo, float literal, positive exponent",
      "template": "{% echo 1e+2 %}",
      "data": {},
      "result": "100"
    },
    {
      "name": "tags, echo, null",
      "template": "{% echo null %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, echo, range",
      "template": "{% echo (1..3) %}",
      "data": {},
      "result": "1..3"
    },
    {
      "name": "tags, echo, query, global",
      "template": "{% echo a %}",
      "data": {
        "a": "b"
      },
      "result": "b"
    },
    {
      "name": "tags, echo, query, local",
      "template": "{% assign a = 'b' %}{% echo a %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, echo, query, dotted",
      "template": "{% echo a.b %}",
      "data": {
        "a": {
          "b": "c"
        }
      },
      "result": "c"
    },
    {
      "name": "tags, echo, query, array index",
      "template": "{% echo a.b[0] %}",
      "data": {
        "a": {
          "b": [
            1,
            2,
            3
          ]
        }
      },
      "result": "1"
    },
    {
      "name": "tags, echo, query, negative array index",
      "template": "{% echo a.b[-1] %}",
      "data": {
        "a": {
          "b": [
            1,
            2,
            3
          ]
        }
      },
      "result": "3"
    },
    {
      "name": "tags, echo, query, array index from variable",
      "template": "{% assign x = 1 %}{% echo a.b[x] %}",
      "data": {
        "a": {
          "b": [
            1,
            2,
            3
          ]
        }
      },
      "result": "2"
    },
    {
      "name": "tags, echo, query, names from variables",
      "template": "{% echo site.data.menu[include.menu][include.locale] %}",
      "data": {
        "site": {
          "data": {
            "menu": {
              "foo": {
                "bar": "it works!"
              }
            }
          }
        },
        "include": {
          "menu": "foo",
          "locale": "bar"
        }
      },
      "result": "it works!"
    },
    {
      "name": "tags, echo, filter",
      "template": "{% echo 'hello' | upcase %}",
      "data": {},
      "result": "HELLO"
    },
    {
      "name": "tags, echo, string literal, end output delimiter",
      "template": "{% echo '}}' %}",
      "data": {},
      "result": "}}"
    },
    {
      "name": "tags, echo, string literal, start output delimiter",
      "template": "{% echo '{{' %}",
      "data": {},
      "result": "{{"
    },
    {
      "name": "tags, echo, string literal, end tag delimiter",
      "template": "{% echo '%}' %}",
      "data": {},
      "result": "%}"
    },
    {
      "name": "tags, echo, string literal, start tag delimiter",
      "template": "{% echo '{%' %}",
      "data": {},
      "result": "{%"
    },
    {
      "name": "tags, echo, string literal, end comment delimiter",
      "template": "{% echo '#}' %}",
      "data": {},
      "result": "#}"
    },
    {
      "name": "tags, echo, string literal, start tag delimiter",
      "template": "{% echo '{#' %}",
      "data": {},
      "result": "{#"
    },
    {
      "name": "tags, echo, string literal, escaped single quote in single quoted",
      "template": "{% echo '\\'' %}",
      "data": {},
      "result": "'"
    },
    {
      "name": "tags, echo, string literal, escaped double quote in double quoted",
      "template": "{% echo \"\\\"\" %}",
      "data": {},
      "result": "\""
    },
    {
      "name": "tags, echo, query, bracket notation",
      "template": "{% echo a['b c'] %}",
      "data": {
        "a": {
          "b c": "d"
        }
      },
      "result": "d"
    },
    {
      "name": "tags, echo, query, bracket notation, root",
      "template": "{% echo ['a b c'] %}",
      "data": {
        "a b c": "d"
      },
      "result": "d"
    },
    {
      "name": "tags, echo, query, singular query selector",
      "template": "{% echo a[a.b.c] %}",
      "data": {
        "a": {
          "b": {
            "c": "d"
          },
          "d": "x"
        }
      },
      "result": "x"
    },
    {
      "name": "tags, echo, ternary expression, truthy",
      "template": "{% echo 'b' if true else 'c' %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, echo, ternary expression, falsy",
      "template": "{% echo 'b' if false else 'c' %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, echo, ternary expression, truthy filter",
      "template": "{% echo 'b' | upcase if true else 'c' %}",
      "data": {},
      "result": "B"
    },
    {
      "name": "tags, echo, ternary expression, falsy filter",
      "template": "{% echo 'b' if false else 'c' | upcase %}",
      "data": {},
      "result": "C"
    },
    {
      "name": "tags, echo, ternary expression, truthy, falsy filter",
      "template": "{% echo 'b' if true else 'c' | upcase %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, echo, ternary expression, falsy, truthy filter",
      "template": "{% echo 'b' | upcase if false else 'c' %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, echo, ternary expression, tail filter",
      "template": "{% echo 'b' if true else 'c' || upcase %}",
      "data": {},
      "result": "B"
    },
    {
      "name": "tags, render, string literal",
      "template": "{% render 'a' %}",
      "data": {
        "b": "c"
      },
      "templates": {
        "a": "{{ b }}"
      },
      "result": "c"
    },
    {
      "name": "tags, render, query",
      "template": "{% render a %}",
      "invalid": true
    },
    {
      "name": "tags, render, bind variable",
      "template": "{% render 'a' with b.c[1] %}",
      "data": {
        "b": {
          "c": [
            1,
            {
              "foo": "bar"
            },
            3
          ]
        }
      },
      "templates": {
        "a": "{{ a.foo }}"
      },
      "result": "bar"
    },
    {
      "name": "tags, render, bind variable with alias",
      "template": "{% render 'a' with b.c[1] as x %}",
      "data": {
        "b": {
          "c": [
            1,
            {
              "foo": "bar"
            },
            3
          ]
        }
      },
      "templates": {
        "a": "{{ x.foo }}"
      },
      "result": "bar"
    },
    {
      "name": "tags, render, bind array, for",
      "template": "{% render 'a' for b.c %}",
      "data": {
        "b": {
          "c": [
            {
              "foo": "bar"
            },
            {
              "foo": "baz"
            }
          ]
        }
      },
      "templates": {
        "a": "{{ a.foo }}"
      },
      "result": "barbaz"
    },
    {
      "name": "tags, render, bind array, with",
      "template": "{% render 'a' with b.c %}",
      "data": {
        "b": {
          "c": [
            {
              "foo": "bar"
            },
            {
              "foo": "baz"
            }
          ]
        }
      },
      "templates": {
        "a": "{{ a[0].foo }}"
      },
      "result": "bar"
    },
    {
      "name": "tags, render, keyword arguments, commas",
      "template": "{% render 'a', b: 'c', d: 'e' %}",
      "data": {},
      "templates": {
        "a": "{{ b }} {{ d }}"
      },
      "result": "c e"
    },
    {
      "name": "tags, render, keyword arguments, equals",
      "template": "{% render 'a', b='c', d='e' %}",
      "data": {},
      "templates": {
        "a": "{{ b }} {{ d }}"
      },
      "result": "c e"
    },
    {
      "name": "tags, render, keyword arguments, no leading comma",
      "template": "{% render 'a' b: 'c', d: 'e' %}",
      "data": {},
      "templates": {
        "a": "{{ b }} {{ d }}"
      },
      "result": "c e"
    },
    {
      "name": "tags, render, keyword arguments, range literal",
      "template": "{% render 'a' b: (1..3) %}",
      "data": {},
      "templates": {
        "a": "{{ b | join: '#' }}"
      },
      "result": "1#2#3"
    },
    {
      "name": "tags, render, new scope",
      "template": "{% assign x = 'y' %}{% render 'a' %}{{ x }}",
      "data": {},
      "templates": {
        "a": "{{ x }}!"
      },
      "result": "!y"
    },
    {
      "name": "tags, render, keyword arguments go out of scope",
      "template": "{% render 'a' b:'c' %}{{ b }}",
      "data": {},
      "templates": {
        "a": "{{ b }}"
      },
      "result": "c"
    },
    {
      "name": "tags, render, forloop drop",
      "template": "{% render 'a' for b %}",
      "data": {
        "b": [
          1,
          2
        ]
      },
      "templates": {
        "a": "{{ a }} {{ forloop.first }} {{ forloop.last }} {{ forloop.index0 }}, "
      },
      "result": "1 true false 0, 2 false true 1, "
    },
    {
      "name": "tags, render, forloop drop, no parentloop",
      "template": "{% for x in (1..2) %}{% render 'a' for b %}{% endfor %}",
      "data": {
        "b": [
          1,
          2
        ]
      },
      "templates": {
        "a": "{{ a }} {{ forloop.parentloop.index0 }}, "
      },
      "result": "1 , 2 , 1 , 2 , "
    },
    {
      "name": "tags, render, include",
      "template": "{% render 'a' %}",
      "templates": {
        "a": "{% include 'b' %}",
        "b": "c"
      },
      "invalid": true
    },
    {
      "name": "tags, capture, content with global variables",
      "template": "{% capture a %}Hello, {{ b }}!{% endcapture %}{{ a }}",
      "data": {
        "b": "you"
      },
      "result": "Hello, you!"
    },
    {
      "name": "tags, capture, into identifier containing a hyphen",
      "template": "{% capture a-b %}Hello, {{ c }}!{% endcapture %}{{ a-b }}",
      "data": {
        "c": "you"
      },
      "result": "Hello, you!"
    },
    {
      "name": "tags, capture, empty block",
      "template": "{% capture a %}{% endcapture %}{{ a }}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, capture, empty block, end of input",
      "template": "{% capture a %}{% endcapture %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, capture, extra tokens",
      "template": "{% capture a b %}{% endcapture %}",
      "invalid": true
    },
    {
      "name": "tags, cycle, string literals",
      "template": "{% cycle 'a', 'b' %}{% cycle 'a', 'b' %}{% cycle 'a', 'b' %}",
      "data": {},
      "result": "aba"
    },
    {
      "name": "tags, cycle, integer literals",
      "template": "{% cycle 1, 2 %}{% cycle 1, 2 %}{% cycle 1, 2 %}",
      "data": {},
      "result": "121"
    },
    {
      "name": "tags, cycle, bool literals",
      "template": "{% cycle true, false %}{% cycle true, false %}{% cycle true, false %}",
      "data": {},
      "result": "truefalsetrue"
    },
    {
      "name": "tags, cycle, queries",
      "template": "{% cycle a, b %}{% cycle a, b %}{% cycle a, b %}",
      "data": {
        "a": "c",
        "b": "d"
      },
      "result": "cdc"
    },
    {
      "name": "tags, cycle, differing items",
      "template": "{% cycle 'a', 'b' %}{% cycle 'a', 'b', 'c' %}{% cycle 'a', 'b' %}",
      "data": {},
      "result": "aab"
    },
    {
      "name": "tags, cycle, named",
      "template": "{% cycle foo: 'a', 'b' %}{% cycle foo: 'a', 'b' %}{% cycle foo: 'a', 'b' %}",
      "data": {},
      "result": "aba"
    },
    {
      "name": "tags, cycle, named, differing items",
      "template": "{% cycle foo: 'a', 'b' %}{% cycle foo: 'a', 'b', 'c' %}{% cycle foo: 'a', 'b' %}",
      "data": {},
      "result": "aab"
    },
    {
      "name": "tags, cycle, differing names, same items",
      "template": "{% cycle foo: 'a', 'b' %}{% cycle bar: 'a', 'b' %}{% cycle foo: 'a', 'b' %}",
      "data": {},
      "result": "aab"
    },
    {
      "name": "tags, cycle, name is a path",
      "template": "{% cycle foo.bar: 'a', 'b' %}",
      "invalid": true
    },
    {
      "name": "tags, cycle, no items",
      "template": "{% cycle %}",
      "invalid": true
    },
    {
      "name": "tags, cycle, name, no items",
      "template": "{% cycle foo: %}",
      "invalid": true
    },
    {
      "name": "tags, increment, named counter",
      "template": "{% increment a %} {% increment a %}",
      "data": {},
      "result": "0 1"
    },
    {
      "name": "tags, increment, multiple",
      "template": "{% increment a %} {% increment b %} {% increment a %} {% increment b %}",
      "data": {},
      "result": "0 0 1 1"
    },
    {
      "name": "tags, increment, output",
      "template": "{% increment a %} {% increment a %} {{ a }}",
      "data": {},
      "result": "0 1 2"
    },
    {
      "name": "tags, increment, global name already exists",
      "template": "{{ a }} {% increment a %} {% increment a %} {{a}}",
      "data": {
        "a": 10
      },
      "result": "10 0 1 10"
    },
    {
      "name": "tags, increment, local name already exists",
      "template": "{% assign a = 10 %}{{ a }} {% increment a %} {% increment a %} {{a}}",
      "data": {},
      "result": "10 0 1 10"
    },
    {
      "name": "tags, increment, and decrement",
      "template": "{% increment a %} {% increment a %} {% decrement a %} {% decrement a %} {% increment a %}",
      "data": {},
      "result": "0 1 1 0 0"
    },
    {
      "name": "tags, assign, string literal",
      "template": "{% assign a = 'b' %}{{ a }}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, assign, integer literal",
      "template": "{% assign a = 123 %}{{ a }}",
      "data": {},
      "result": "123"
    },
    {
      "name": "tags, assign, float literal",
      "template": "{% assign a = 1.23 %}{{ a }}",
      "data": {},
      "result": "1.23"
    },
    {
      "name": "tags, assign, range literal",
      "template": "{% assign a = (1..3) %}{{ a | join: '#' }}",
      "data": {},
      "result": "1#2#3"
    },
    {
      "name": "tags, assign, simple query",
      "template": "{% assign a = b %}{{ a }}",
      "data": {
        "b": "c"
      },
      "result": "c"
    },
    {
      "name": "tags, assign, query, nested object",
      "template": "{% assign a = b.c %}{{ a }}",
      "data": {
        "b": {
          "c": "d"
        }
      },
      "result": "d"
    },
    {
      "name": "tags, assign, query, nested array element",
      "template": "{% assign a = b.c[1] %}{{ a }}",
      "data": {
        "b": {
          "c": [
            1,
            2,
            3
          ]
        }
      },
      "result": "2"
    },
    {
      "name": "tags, assign, string literal containing an end tag delimiter",
      "template": "{% assign a = 'foo%}bar' %}{{ a }}",
      "data": {},
      "result": "foo%}bar"
    },
    {
      "name": "tags, assign, string literal containing a start output delimiter",
      "template": "{% assign a = 'foo{{bar' %}{{ a }}",
      "data": {},
      "result": "foo{{bar"
    },
    {
      "name": "tags, assign, shadow global variable",
      "template": "{{ a }}{% assign a = 'c' %}{{ a }}",
      "data": {
        "a": "b"
      },
      "result": "bc"
    },
    {
      "name": "tags, assign, string literal, filtered",
      "template": "{% assign a = 'b' | upcase %}{{ a }}",
      "data": {},
      "result": "B"
    },
    {
      "name": "tags, assign, ternary expression, truthy",
      "template": "{% assign a = 'b' if true else 'c' %}{{ a }}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, assign, ternary expression, falsy",
      "template": "{% assign a = 'b' if false else 'c' %}{{ a }}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, assign, ternary expression, truthy filter",
      "template": "{% assign a = 'b' | upcase if true else 'c' %}{{ a }}",
      "data": {},
      "result": "B"
    },
    {
      "name": "tags, assign, ternary expression, falsy filter",
      "template": "{% assign a = 'b' if false else 'c' | upcase %}{{ a }}",
      "data": {},
      "result": "C"
    },
    {
      "name": "tags, assign, ternary expression, truthy, falsy filter",
      "template": "{% assign a = 'b' if true else 'c' | upcase %}{{ a }}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, assign, ternary expression, falsy, truthy filter",
      "template": "{% assign a = 'b' | upcase if false else 'c' %}{{ a }}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, assign, ternary expression, tail filter",
      "template": "{% assign a = 'b' if true else 'c' || upcase %}{{ a }}",
      "data": {},
      "result": "B"
    },
    {
      "name": "tags, assign, missing assignment operator",
      "template": "{% assign a 'b' %}",
      "invalid": true
    },
    {
      "name": "tags, assign, missing expression",
      "template": "{% assign a = %}",
      "invalid": true
    },
    {
      "name": "tags, include, string literal",
      "template": "{% include 'a' %}",
      "data": {
        "b": "c"
      },
      "templates": {
        "a": "{{ b }}"
      },
      "result": "c"
    },
    {
      "name": "tags, include, query",
      "template": "{% include a %}",
      "data": {
        "a": "b",
        "c": "d"
      },
      "templates": {
        "b": "{{ c }}"
      },
      "result": "d"
    },
    {
      "name": "tags, include, bind variable",
      "template": "{% include 'a' with b.c[1] %}",
      "data": {
        "b": {
          "c": [
            1,
            {
              "foo": "bar"
            },
            3
          ]
        }
      },
      "templates": {
        "a": "{{ a.foo }}"
      },
      "result": "bar"
    },
    {
      "name": "tags, include, bind variable with alias",
      "template": "{% include 'a' with b.c[1] as x %}",
      "data": {
        "b": {
          "c": [
            1,
            {
              "foo": "bar"
            },
            3
          ]
        }
      },
      "templates": {
        "a": "{{ x.foo }}"
      },
      "result": "bar"
    },
    {
      "name": "tags, include, bind array, for",
      "template": "{% include 'a' for b.c %}",
      "data": {
        "b": {
          "c": [
            {
              "foo": "bar"
            },
            {
              "foo": "baz"
            }
          ]
        }
      },
      "templates": {
        "a": "{{ a.foo }}"
      },
      "result": "barbaz"
    },
    {
      "name": "tags, include, bind array, with",
      "template": "{% include 'a' with b.c %}",
      "data": {
        "b": {
          "c": [
            {
              "foo": "bar"
            },
            {
              "foo": "baz"
            }
          ]
        }
      },
      "templates": {
        "a": "{{ a.foo }}"
      },
      "result": "barbaz"
    },
    {
      "name": "tags, include, keyword arguments, commas",
      "template": "{% include 'a', b: 'c', d: 'e' %}",
      "data": {},
      "templates": {
        "a": "{{ b }} {{ d }}"
      },
      "result": "c e"
    },
    {
      "name": "tags, include, keyword arguments, equals",
      "template": "{% include 'a', b='c', d='e' %}",
      "data": {},
      "templates": {
        "a": "{{ b }} {{ d }}"
      },
      "result": "c e"
    },
    {
      "name": "tags, include, keyword arguments, no leading comma",
      "template": "{% include 'a' b: 'c', d: 'e' %}",
      "data": {},
      "templates": {
        "a": "{{ b }} {{ d }}"
      },
      "result": "c e"
    },
    {
      "name": "tags, include, shares scope with parents",
      "template": "{% include 'a' %}{{ x }}",
      "data": {},
      "templates": {
        "a": "{% assign x = 42 %}"
      },
      "result": "42"
    },
    {
      "name": "tags, include, break loop in parent template",
      "template": "{% for a in b %}{% include 'a' %}{% endfor %}",
      "data": {
        "b": [
          1,
          2,
          3
        ]
      },
      "templates": {
        "a": "{{ a }}{% break %}"
      },
      "result": "1"
    },
    {
      "name": "tags, include, keyword arguments go out of scope",
      "template": "{% include 'a' b:'c' %}{{ b }}",
      "data": {},
      "templates": {
        "a": "{{ b }}"
      },
      "result": "c"
    },
    {
      "name": "tags, include, assign to keyword argument",
      "template": "{% include 'a' b:'c' %}{{ b }}",
      "data": {},
      "templates": {
        "a": "{{ b }}{% assign b = 'x' %}{{ b }}"
      },
      "result": "ccx"
    },
    {
      "name": "tags, include, render",
      "template": "{% include 'a' %}",
      "data": {},
      "templates": {
        "a": "{% render 'b' %}",
        "b": "c"
      },
      "result": "c"
    },
    {
      "name": "tags, liquid, string literal, single line",
      "template": "{% liquid echo 'a' %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, liquid, string literals, multiple lines",
      "template": "{% liquid echo 'a'\nassign b = 'c'\necho b %}",
      "data": {},
      "result": "ac"
    },
    {
      "name": "tags, liquid, multiple lines, leading newline",
      "template": "{% liquid echo 'a'\nassign b = 'c'\necho b %}",
      "data": {},
      "result": "ac"
    },
    {
      "name": "tags, liquid, carriage return and newline terminated statements",
      "template": "{% liquid echo 'a'\r\nassign b = 'c'\r\necho b %}",
      "data": {},
      "result": "ac"
    },
    {
      "name": "tags, liquid, carriage return terminated statements",
      "template": "{% liquid echo 'a'\rassign b = 'c'\recho b %}",
      "invalid": true
    },
    {
      "name": "tags, liquid, empty",
      "template": "{% liquid %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, liquid, only whitespace",
      "template": "{% liquid\n   \n\n   \t \n\t\n  %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, liquid, comment",
      "template": "{% liquid # some comment %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, liquid, comment, leading newline",
      "template": "{% liquid\n# some comment %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, liquid, comments",
      "template": "{% liquid\n# some comment\n# other comment %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, liquid, comments and tags",
      "template": "{% liquid\n# some comment\necho 'a'\n# other comment %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, liquid, comment does not consume whitespace control",
      "template": "{% liquid\n# some comment -%}\n\na",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, liquid, block",
      "template": "{% if true %}{% liquid echo 'a' %}{% endif %}",
      "data": {},
      "result": "a"
    },
    {
      "name": "tags, liquid, can't close outer block",
      "template": "{% if true %}{% liquid endif' %}",
      "invalid": true
    },
    {
      "name": "tags, liquid, liquid in liquid",
      "template": "{% liquid liquid echo 'a' %}",
      "invalid": true
    },
    {
      "name": "tags, decrement, named counter",
      "template": "{% decrement a %} {% decrement a %}",
      "data": {},
      "result": "-1 -2"
    },
    {
      "name": "tags, decrement, multiple",
      "template": "{% decrement a %} {% decrement b %} {% decrement a %} {% decrement b %}",
      "data": {},
      "result": "-1 -1 -2 -2"
    },
    {
      "name": "tags, decrement, output",
      "template": "{% decrement a %} {% decrement a %} {{ a }}",
      "data": {},
      "result": "-1 -2 -2"
    },
    {
      "name": "tags, decrement, global name already exists",
      "template": "{{ a }} {% decrement a %} {% decrement a %} {{a}}",
      "data": {
        "a": 10
      },
      "result": "10 -1 -2 10"
    },
    {
      "name": "tags, decrement, local name already exists",
      "template": "{% assign a = 10 %}{{ a }} {% decrement a %} {% decrement a %} {{a}}",
      "data": {},
      "result": "10 -1 -2 10"
    },
    {
      "name": "tags, decrement, and increment",
      "template": "{% decrement a %} {% decrement a %} {% increment a %} {% increment a %} {% decrement a %}",
      "data": {},
      "result": "-1 -2 -2 -1 -1"
    },
    {
      "name": "tags, case, query, first when",
      "template": "{% case a %}{% when 'b' %}c{% when 'd' %}e{% endcase %}",
      "data": {
        "a": "b"
      },
      "result": "c"
    },
    {
      "name": "tags, case, query, last when",
      "template": "{% case a %}{% when 'b' %}c{% when 'd' %}e{% endcase %}",
      "data": {
        "a": "d"
      },
      "result": "e"
    },
    {
      "name": "tags, case, query, both whens",
      "template": "{% case a %}{% when 'b' %}c{% when 'b' %}d{% endcase %}",
      "data": {
        "a": "b"
      },
      "result": "cd"
    },
    {
      "name": "tags, case, query, no match",
      "template": "{% case a %}{% when 'b' %}c{% when 'd' %}e{% endcase %}",
      "data": {
        "a": "x"
      },
      "result": ""
    },
    {
      "name": "tags, case, string literal",
      "template": "{% case 'a' %}{% when 'a' %}b{% when 'c' %}d{% endcase %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, case, or",
      "template": "{% case 'b' %}{% when 'a' or 'b' %}c{% when 'd' %}e{% endcase %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, case, comma separated or",
      "template": "{% case 'b' %}{% when 'a', 'b' %}c{% when 'd' %}e{% endcase %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, case, or, multiple",
      "template": "{% case 'b' %}{% when 'a' or 'b' or 'x' %}c{% when 'd' %}e{% endcase %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, case, multiple comma separated or",
      "template": "{% case 'b' %}{% when 'a', 'b', 'x' %}c{% when 'd' %}e{% endcase %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, case, mixed comma and or separated",
      "template": "{% case 'b' %}{% when 'a' or 'b', 'x' %}c{% when 'd' %}e{% endcase %}",
      "data": {},
      "result": "c"
    },
    {
      "name": "tags, case, default",
      "template": "{% case 'a' %}{% when 'b' %}c{% when 'd' %}e{% else %}f{% endcase %}",
      "data": {},
      "result": "f"
    },
    {
      "name": "tags, case, default, not rendered",
      "template": "{% case 'a' %}{% when 'b' %}c{% when 'a' %}e{% else %}f{% endcase %}",
      "data": {},
      "result": "e"
    },
    {
      "name": "tags, case, default, no whens",
      "template": "{% case 'a' %}{% else %}f{% endcase %}",
      "data": {},
      "result": "f"
    },
    {
      "name": "tags, case, no whens or default",
      "template": "{% case 'a' %}{% endcase %}",
      "data": {},
      "result": ""
    },
    {
      "name": "tags, case, whitespace after case",
      "template": "{% case 'a' %}\n  {% when 'a' %}b{% endcase %}",
      "data": {},
      "result": "b"
    },
    {
      "name": "tags, case, content after case",
      "template": "{% case 'a' %}hello{% when 'b' %}c{% endcase %}",
      "invalid": true
    },
    {
      "name": "tags, case, missing when expression",
      "template": "{% case 'a' %}{% when %}b{% endcase %}",
      "invalid": true
    },
    {
      "name": "tags, case, switch on array",
      "template": "{% case a %}{% when b %}c{% endcase %}",
      "data": {
        "a": [
          1,
          2,
          3
        ],
        "b": [
          1,
          2,
          3
        ]
      },
      "result": "c"
    },
    {
      "name": "tags, case, multiple else blocks",
      "template": "{% case a %}{% when b %}c{% else %}d{% else %}{% endcase %}",
      "invalid": true
    },
    {
      "name": "tags, case, when after else",
      "template": "{% case a %}{% when b %}c{% else %}d{% when 'e' %}f{% endcase %}",
      "invalid": true
    }
  ]
}